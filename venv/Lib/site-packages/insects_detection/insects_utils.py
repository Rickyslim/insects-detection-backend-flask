import cv2 as cv
import numpy as np
import os
from insects_detection.pic_utils import pic_tools
class insects_tools():

    @staticmethod
    def count_insects(img):
        grayImage = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        kernelx = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]], dtype=int)  # prewitt 1算子
        kernely = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]], dtype=int)  # prewitt 2算子
        x = cv.filter2D(grayImage, cv.CV_16S, kernelx)
        y = cv.filter2D(grayImage, cv.CV_16S, kernely)
        absx = cv.convertScaleAbs(x)
        absy = cv.convertScaleAbs(y)
        Prewitt = cv.addWeighted(absx, 0.5, absy, 0.5, 0)
        ret, Prewitt = cv.threshold(Prewitt, 35, 255, cv.THRESH_BINARY)  # 输入灰度图，输出二值图
        element = cv.getStructuringElement(cv.MORPH_CROSS, (1, 1))  # 形态学去噪
        Prewitt = cv.morphologyEx(Prewitt, cv.MORPH_OPEN, element)  # 开运算去噪
        contours, hierarchy = cv.findContours(Prewitt, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
        cv.drawContours(Prewitt, contours, -1, (120, 0, 0), 2)  # 绘制轮廓
        count = 0
        for cont in contours:
            ares = cv.contourArea(cont)
            if ares < 10 or ares > 100:
                continue
            count += 1
        return count


    @staticmethod
    def insects_count_visualization(img,contours):
        count = 0
        for cont in contours:
            ares = cv.contourArea(cont)
            if ares < 10 or ares > 100:
                continue
            count += 1
            print('标号{}--面积{}:'.format(count, ares), end='')
            x, y, w, h = cv.boundingRect(cont)
            print('坐标为x-{}-y-{}'.format(x, y))
            cv.rectangle(img, (x, y, w, h), (0, 0, 255), 1)  # 为每只昆虫绘制外接矩形
            y = 10 if y < 10 else y
            cv.putText(img, str(count), (x, y), cv.FONT_HERSHEY_COMPLEX, 0.4, (0, 255, 0), 1)
        cv.namedWindow('count_results', 2)
        cv.imshow('count_results', img)
        cv.waitKey(0)

    # 统计一张图片上的虫群数量
    @staticmethod
    def count_insects_on_single_img(img_path):
        img = pic_tools.read_imgs(img_path)
        processed_img = pic_tools.cutout_imgs(img)  # 截取粘虫板
        insects_num = insects_tools.count_insects(processed_img)  # 对粘虫板进行计数
        print("已完成" + str(img_path))
        return insects_num

    # 统计一张粘虫板上的虫群数量
    @staticmethod
    def count_insects_on_single_board(a_side, b_side):
        _, filename = os.path.split(a_side)  # 获取图片名称
        board_location = str(filename).split(".")[0]
        insects_board = insects_tools.count_insects_on_single_img(a_side) + insects_tools.count_insects_on_single_img(b_side)
        return board_location, insects_board

    # 统计一个温室每张粘虫板上的虫群数量
    # input: 一个温室的图片路径
    # output(dict): 该温室下每张粘虫板的虫群数量以及虫群总数
    @staticmethod
    def green_house_insects_info(greenhouse_gallery_path):
        imgs_dir = pic_tools.read_imgs_from_dir(greenhouse_gallery_path)
        gh_insects_info = {}
        gh_insects_boards_info={}
        insects_total = 0
        img_label = list(range(0, len(imgs_dir)))
        greenhouse_tag = str(imgs_dir[0]).rsplit('\\',1)[1][0]
        for a_side, b_side in zip(img_label[::2], img_label[1::2]):  # 根据图片遍历的奇偶匹配一张粘虫板的a，b面
            board_location, insects_num_board = insects_tools.count_insects_on_single_board(imgs_dir[a_side], imgs_dir[b_side])
            gh_insects_boards_info[board_location] = insects_num_board
        for insects_num in gh_insects_boards_info.values():  # 获取温室所有粘虫板上害虫的总和
            insects_total += insects_num
        gh_insects_info["each_boards_info"]=gh_insects_boards_info
        gh_insects_info["insects_total"] = insects_total
        gh_insects_info["greenhouse_tag"] = greenhouse_tag
        return gh_insects_info